{"version":3,"sources":["webpack:///src/app/shared/validations.ts","webpack:///src/app/modules/material.module.ts","webpack:///src/app/pages/home/home.component.ts","webpack:///src/app/pages/home/home.component.html","webpack:///src/app/forms/text-input/text-input.component.ts","webpack:///src/app/forms/text-input/text-input.component.html","webpack:///src/app/errors/text-errors/text-errors.component.ts","webpack:///src/app/errors/text-errors/text-errors.component.html","webpack:///src/app/forms/date-input/date-input.component.ts","webpack:///src/app/forms/date-input/date-input.component.html","webpack:///src/app/google-places.component.ts","webpack:///src/app/errors/not-found/not-found.component.ts","webpack:///src/app/errors/not-found/not-found.component.html","webpack:///src/app/shared/services/event.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/menu-nav/menu-nav.component.html","webpack:///src/app/menu-nav/menu-nav.component.ts","webpack:///src/app/pages/event-edit/event-edit.component.ts","webpack:///src/app/pages/event-edit/event-edit.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/pages/dashboard/dashboard.component.ts","webpack:///src/app/pages/dashboard/dashboard.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/services/index.ts","webpack:///src/app/pages/event-details/event-details.component.ts","webpack:///src/app/pages/event-details/event-details.component.html","webpack:///src/app/shared/guard/auth.guard.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.component.html","webpack:///src/app/interceptors/jwt.interceptor.ts","webpack:///src/app/shared/services/account.service.ts","webpack:///src/app/pages/forgot-password/forgot-password.component.ts","webpack:///src/app/pages/forgot-password/forgot-password.component.html","webpack:///src/app/pages/event-list/event-list.component.ts","webpack:///src/app/pages/event-list/event-list.component.html","webpack:///src/app/pages/change-password/change-password.component.ts","webpack:///src/app/pages/change-password/change-password.component.html","webpack:///src/app/shared/services/indexedDb.service.ts","webpack:///src/app/interceptors/error.interceptor.ts","webpack:///src/app/members/member-edit/member-edit.component.ts","webpack:///src/app/members/member-edit/member-edit.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["checkDate","date","control","year","Date","value","getUTCFullYear","month","getUTCMonth","date2","getUTCDate","getFullYear","getMonth","getDate","mustMatch","firstText","secondText","hasError","MaterialModule","declarations","imports","exports","HomeComponent","selector","templateUrl","styleUrls","TextInputComponent","ngControl","valueAccessor","obj","fn","type","label","TextErrorsComponent","baseUrl","DateInputComponent","GooglePlacesComponent","setAddress","getPlaceAutocomplete","autocomplete","google","maps","places","Autocomplete","addressText","nativeElement","componentRestrictions","country","event","addListener","place","getPlace","address_components","template","addressType","NotFoundComponent","EventService","http","getAll","get","getByDistance","latitude","longitude","distance","data","getByCity","city","state","getStates","getCities","getEvent","id","put","post","addParticipant","remove","environment","production","environmentName","LoginComponent","router","accountService","isLoginError","isEmailError","hidePassword","errorMessage","rememberMe","isLoading","loginApiUrl","getUserProfileUrl","navigate","form","login","email","password","subscribe","user","gotoDashBoard","error","loginError","MenuNavComponent","indexedDBService","isLoggedIn","logout","deleteDBAsync","console","log","EventEditComponent","eventService","formBuilder","location","todaysDate","startsDate","formErrorMessage","repeatingDaysForm","group","days","array","addDayGroup","address","day","required","startTime","endTime","daysArray","push","index","removeAt","i","length","invalid","isRepeating","startsTime","endsTime","valid","creatorEmail","repeatingDaysTimes","result","removeRepeatingDays","getAddress","saveEvent","AppComponent","breakpointObserver","isHandset$","observe","Handset","pipe","matches","DashboardComponent","displayedColumns","dataSource","eventsCreated","paginator","dataSource2","eventsParticipating","AppModule","provide","useClass","multi","forRoot","apiKey","timeOut","positionClass","providers","bootstrap","EventDetailsComponent","route","mapType","loadEvent","isParticipating","checkEventIfParticipating","snapshot","paramMap","forEach","AuthGuard","currentUser$","RegisterComponent","fb","toastr","hideConfirmPassword","passwordPattern","initializeForm","registerForm","confirmEmail","matchValues","pattern","confirmPassword","firstName","lastName","gender","DOB","matchTo","parent","controls","isMatching","setValue","JSON","stringify","replace","register","response","navigateByUrl","JwtInterceptor","request","next","currentUser","clone","setHeaders","Authorization","token","handle","AccountService","currentUserSubject","asObservable","localStorage","setItem","model","ForgotPasswordComponent","forgotPasswordApiUrl","Email","forgotPasswordForm","userInfo","message","onSubmit","EventListComponent","markers","states","navigator","geolocation","getCurrentPosition","position","coords","startDate","events","addMarkers","userLocation","cityError","lat","lng","name","cities","getEventsByLocation","getEventsCities","getEventsByCity","sortByDate","ChangePasswordComponent","changePasswordUrl","changePasswordModel","oldPassword","newPassword","IndexedDBService","openDB","db","version","stores","then","userId","e","stack","kindOfEvent","numParticipants","spotsAvailable","description","eventId","r","add","toArray","where","eventCreatedId","eventParticipatingId","open","ErrorInterceptor","status","errors","modalStateErrors","key","flat","statusText","navigationExtras","MemberEditComponent","routes","path","component","runGuardsAndResolvers","canActivate","children","pathMatch","AppRoutingModule","relativeLinkResolution","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport function checkDate(date: Date): ValidatorFn {\r\n    return (control: AbstractControl) => {\r\n        const year = new Date(control.value).getUTCFullYear();\r\n        const month = new Date(control.value).getUTCMonth();\r\n        const date2 = new Date(control.value).getUTCDate();\r\n\r\n        if (date.getFullYear() === year) {\r\n            if (date.getMonth() === month) {\r\n                if (date.getDate() > date2) {\r\n                    return { value: true };\r\n                }\r\n            } else if (date.getMonth() > month) {\r\n                return { value: true }\r\n            }\r\n        } else if (date.getFullYear() > year) {\r\n            return { value: true };\r\n        }\r\n        return null;\r\n    };\r\n}\r\n\r\nexport function mustMatch(firstText: AbstractControl): ValidatorFn {\r\n    return (secondText: AbstractControl) => {\r\n        if (!firstText && !secondText) {\r\n            return null;\r\n        }\r\n        else if (secondText.hasError && !firstText.hasError) {\r\n            return null;\r\n        }\r\n        else if (firstText.value !== secondText.value) {\r\n            return { value: true };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatInputModule,\n    MatListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatGridListModule,\n    MatPaginatorModule,\n    MatSidenavModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatNativeDateModule\n  ],\n  exports: [\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatInputModule,\n    MatListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatGridListModule,\n    MatPaginatorModule,\n    MatSidenavModule,\n    MatTableModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatNativeDateModule\n  ]\n})\nexport class MaterialModule { }\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\n\r\nexport class HomeComponent implements OnInit {\r\n  ngOnInit() {\r\n  }\r\n}\r\n","<div class=\"home\">\r\n  <div class=\"background-image\"></div>\r\n\r\n  <div class=\"content\">\r\n    <h1>Welcome to GroupUp</h1>\r\n    <p>Want to find something to do on the weekends?</p>\r\n    <p>New to the city and looking for new friends?</p>\r\n    <p>Have a project need a helping hand?</p>\r\n    <p>Have a class you wanted to take but didn't want to do alone?</p>\r\n    <p>Use GroupUp to discover events to do on that day off or for the weekends. Post a project to find that helping\r\n      hand. Or post an adventure and meet people with similar interests. Find your group to collaborate, explore, and\r\n      create something amazing while making new connections.</p>\r\n\r\n  </div>\r\n\r\n</div>\r\n","import { Self } from '@angular/core';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\n\n@Component({\n  selector: 'GU-text-input',\n  templateUrl: './text-input.component.html',\n  styleUrls: ['./text-input.component.scss']\n})\nexport class TextInputComponent implements ControlValueAccessor {\n  @Input() label: string;\n  @Input() type: string;\n\n  constructor(@Self() public ngControl: NgControl) {\n    this.ngControl.valueAccessor = this;\n  }\n\n  writeValue(obj: any): void {\n  }\n  registerOnChange(fn: any): void {\n  }\n  registerOnTouched(fn: any): void {\n  }\n\n}\n","<mat-form-field>\n  <input matInput placeholder={{label}} type={{type}} [formControl]=\"ngControl.control\">\n  <mat-error *ngIf=\"ngControl.control.errors?.required\">Please enter a {{label}}</mat-error>\n  <mat-error *ngIf=\"ngControl.control.errors?.email\">Please enter a valid {{label}}</mat-error>\n  <mat-error *ngIf=\"ngControl.control.errors?.isMatching\">{{label}} doesn't match</mat-error>\n  <mat-error *ngIf=\"ngControl.control.errors?.pattern\">\n    Password needs at least 1 uppercase, 1\n    lowercase, 1\n    number and 1 special character\n  </mat-error>\n</mat-form-field>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'GU-text-errors',\n  templateUrl: './text-errors.component.html',\n  styleUrls: ['./text-errors.component.scss']\n})\nexport class TextErrorsComponent implements OnInit {\n  baseUrl = 'http://localhost:5001/api/';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>text-errors works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'GU-date-input',\n  templateUrl: './date-input.component.html',\n  styleUrls: ['./date-input.component.scss']\n})\nexport class DateInputComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>date-input works!</p>\n","\r\nimport { Component, ViewChild, EventEmitter, Output, OnInit, AfterViewInit, Input } from '@angular/core';\r\nimport { AddressModel } from './shared/models/address.model';\r\n\r\ndeclare var google: any;\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-google-place',\r\n  template: `\r\n  <input class=\"input\"\r\n    type=\"text\"\r\n    #addressText style=\"padding: 12px 20px; border: 1px solid #ccc; width: 400px\"\r\n    >\r\n`,\r\n})\r\n\r\nexport class GooglePlacesComponent implements AfterViewInit {\r\n  @Input() addressType: string;\r\n  @Output() setAddress: EventEmitter<any> = new EventEmitter();\r\n  @ViewChild('addressText', { static: true }) addressText: any;\r\n\r\n  ngAfterViewInit() {\r\n    this.getPlaceAutocomplete();\r\n  }\r\n\r\n  private getPlaceAutocomplete() {\r\n    const autocomplete = new google.maps.places.Autocomplete(this.addressText.nativeElement,\r\n      {\r\n        componentRestrictions: { country: 'US' }\r\n      });\r\n\r\n    google.maps.event.addListener(autocomplete, 'place_changed', () => {\r\n      const place = autocomplete.getPlace();\r\n      if (place.address_components) {\r\n        // this.setAddress.emit(this.getAddress(place));\r\n      }\r\n    });\r\n  }\r\n\r\n  // private getAddress(place: any): AddressModel {\r\n  //   if (place.address_components.length >= 6) {\r\n  //     const index = place.address_components.length === 7 ? 0 : 1;\r\n  //     const address = new AddressModel();\r\n  //     address.name = place.name;\r\n  //     address.street = place.address_components[0].short_name + ' ' + place.address_components[1].short_name;\r\n  //     address.city = place.address_components[index + 2].short_name;\r\n  //     address.state = place.address_components[index + 4].short_name;\r\n  //     address.country = place.address_components[index + 5].short_name;\r\n  //     address.zipCode = place.address_components[index + 6].short_name;\r\n  //     address.longitude = place.geometry.location.lng();\r\n  //     address.latitude = place.geometry.location.lat();\r\n  //     return address;\r\n  //   }\r\n\r\n  // }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'GU-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n  <h1>Not found</h1>\n  <button class=\"btn btn-info btn-lg\" routerLink='/'>Return to home page</button>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { EventModel } from '../models/event.model';\r\nimport {\r\n  environment\r\n} from '../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class EventService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAll = () => this.http.get(environment.baseUrl);\r\n\r\n  getByDistance = (latitude: number, longitude: number, distance: number) => {\r\n    const data = `?latitude=${latitude}&longitude=${longitude}&distance=${distance}`;\r\n    return this.http.get(environment.baseUrl + data);\r\n  }\r\n\r\n  getByCity = (city: string, state: string) => {\r\n    const data = `?city=${city}&state=${state}`;\r\n    return this.http.get(environment.baseUrl + data);\r\n  }\r\n\r\n  getStates = () => this.http.get(environment.baseUrl);\r\n\r\n  getCities = (state: string) => {\r\n    const data = `?state=${state}`;\r\n    return this.http.get(environment.baseUrl + data);\r\n  }\r\n\r\n  getEvent = (id: string) => this.http.get(environment.baseUrl + id);\r\n\r\n  put = (event: EventModel) => this.http.post(environment.baseUrl, event);\r\n\r\n  addParticipant = (data: any) => this.http.post(environment.baseUrl, data);\r\n\r\n  remove = (id: number) => this.http.delete(`/${id}`);\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\n\r\nexport const environment = {\r\n  production: false,\r\n  environmentName: 'Developing',\r\n  baseUrl: 'https://localhost:5001/api/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { AccountService, IndexedDBService } from '../../shared/services';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent {\r\n\r\n  isLoginError = false;\r\n  isEmailError = false;\r\n  hidePassword = true;\r\n  errorMessage = '';\r\n  rememberMe = false;\r\n  isLoading = false;\r\n\r\n  loginApiUrl = '/api/v1/account/login';\r\n  getUserProfileUrl = '/api/v1/profile/getUserProfile';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private accountService: AccountService,) { }\r\n\r\n  gotoDashBoard(): void {\r\n    this.router.navigate(['/dashboard']);\r\n  }\r\n\r\n  login(form: any): void {\r\n    this.isLoading = true;\r\n\r\n    this.accountService.login(form.email, form.password, form.rememberMe).subscribe(user => {\r\n      this.isLoading = false;\r\n      this.gotoDashBoard();\r\n    },\r\n      error => {\r\n        this.isLoginError = true;\r\n        this.isLoading = false;\r\n        this.errorMessage = error.error.loginError;\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n}\r\n","<mat-card>\r\n  <form #loginForm=\"ngForm\" (ngSubmit)=\"login(loginForm.value)\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <h2>Login Form</h2>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Email\" name=\"email\" ngModel required />\r\n      </mat-form-field>\r\n      <label *ngIf=\"isEmailError\" class=\"alert alert-danger\">\r\n        Please enter a valid email\r\n      </label>\r\n\r\n      <mat-form-field>\r\n        <input matInput placeholder=\"Password\" [type]=\"hidePassword ? 'password' : 'text'\" name=\"password\" ngModel\r\n          required />\r\n        <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{hidePassword ? 'visibility_off' : 'visibility'}}\r\n        </mat-icon>\r\n      </mat-form-field>\r\n    </mat-card-content>\r\n\r\n    <mat-checkbox name=\"rememberMe\" [(ngModel)]=\"rememberMe\">Remember Me</mat-checkbox>\r\n\r\n    <mat-error *ngIf=\"isLoginError\">\r\n      {{errorMessage}}\r\n    </mat-error>\r\n\r\n    <mat-card-actions>\r\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginForm.form.valid\">Login\r\n      </button>\r\n      <a mat-button routerLink=\"[registerPageUrl]\">Register</a>\r\n      <a mat-button routerLink=\"[forgotPasswordPageUrl]\">Forgot Password</a>\r\n    </mat-card-actions>\r\n\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n\r\n    <mat-card-footer></mat-card-footer>\r\n\r\n  </form>\r\n</mat-card>\r\n","<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport=\"true\">\r\n    <mat-toolbar>Menu</mat-toolbar>\r\n    <mat-nav-list>\r\n\r\n      <ng-container *ngIf=\"(accountService.currentUser$ | async)==null\">\r\n        <a mat-list-item routerLink=\"/login\" routerLinkActive=\"active\">Login</a>\r\n        <a mat-list-item routerLink=\"/register\" routerLinkActive=\"active\">Register</a>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"accountService.currentUser$ | async\">\r\n        <a mat-list-item routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard</a>\r\n        <a mat-list-item routerLink=\"/event-edit\" routerLinkActive=\"active\">Create new\r\n          event</a>\r\n        <a mat-list-item routerLink=\"/event-list\" routerLinkActive=\"active\">Events</a>\r\n        <a mat-list-item (click)=\"logout()\">Logout</a>\r\n      </ng-container>\r\n\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"primary\">\r\n      <div class=\"logo-container\">\r\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\">\r\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n        </button>\r\n        <span>GroupUp</span>\r\n        <img class=\"logo\" src=\"/assets/images/logo/logo_transparent.png\">\r\n      </div>\r\n\r\n      <div class=\"nav-links-container\">\r\n\r\n        <ng-container *ngIf=\"(accountService.currentUser$ | async)==null\">\r\n          <a mat-list-item routerLink=\"/login\" routerLinkActive=\"active\"><u>*Login</u></a>\r\n          <a mat-list-item routerLink=\"/register\" routerLinkActive=\"active\"><u>*Register</u></a>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"accountService.currentUser$ | async\">\r\n          <a mat-list-item routerLink=\"/dashboard\" routerLinkActive=\"active\"><u>*Dashboard</u></a>\r\n          <a mat-list-item routerLink=\"/event-edit\" routerLinkActive=\"active\"><u>*Create new\r\n              event</u></a>\r\n          <a mat-list-item routerLink=\"/event-list\" routerLinkActive=\"active\"><u>*Events</u></a>\r\n          <!-- <a mat-list-item (click)=\"logout()\"><u>*Logout</u></a> -->\r\n        </ng-container>\r\n\r\n      </div>\r\n\r\n    </mat-toolbar>\r\n\r\n    <ng-content></ng-content>\r\n\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService, IndexedDBService } from '../shared/services';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-menu-nav',\r\n  templateUrl: './menu-nav.component.html',\r\n  styleUrls: ['./menu-nav.component.scss']\r\n})\r\n\r\nexport default class MenuNavComponent implements OnInit {\r\n\r\n  user: any;\r\n  isLoggedIn = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    public accountService: AccountService,\r\n    private indexedDBService: IndexedDBService\r\n  ) { }\r\n\r\n  async ngOnInit() {\r\n    // Checking user with the server\r\n    if (this.user) {\r\n      await this.indexedDBService.deleteDBAsync();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log user out,\r\n   * delete database in browser,\r\n   * then navigate user to login page.\r\n   */\r\n  logout = (): void => {\r\n    this.accountService.logout().subscribe(\r\n      () => {\r\n        this.indexedDBService.deleteDBAsync();\r\n        //  this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { FormBuilder, FormGroup, FormArray, Validators, FormControl } from '@angular/forms';\r\nimport { EventService, IndexedDBService } from '../../shared/services';\r\nimport { EventModel, AddressModel } from '../../shared/models';\r\nimport { checkDate } from '../../shared/validations';\r\nimport { Subscription } from 'rxjs';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'GU-event-edit',\r\n  templateUrl: './event-edit.component.html',\r\n  styleUrls: ['./event-edit.component.scss']\r\n})\r\n\r\nexport class EventEditComponent implements OnInit, OnDestroy {\r\n\r\n  event: EventModel;\r\n  user: any;\r\n\r\n  repeatingDaysForm: FormGroup;\r\n  todaysDate = new Date();\r\n\r\n  startsDate = new FormControl('', checkDate(this.todaysDate));\r\n\r\n  sub: Subscription;\r\n  location: Location;\r\n  formErrorMessage = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private eventService: EventService,\r\n    private formBuilder: FormBuilder,\r\n    private indexedDBService: IndexedDBService,\r\n    location: Location) {\r\n    this.location = location;\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    // If there's no event selected then a new event is being created\r\n    // if (!this.event) { this.event = new EventModel(); }\r\n\r\n\r\n\r\n    this.repeatingDaysForm = this.formBuilder.group({\r\n      days: this.formBuilder.array([this.addDayGroup()])\r\n    });\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n\r\n  }\r\n\r\n  getAddress(address: AddressModel) {\r\n    this.event.location = address;\r\n  }\r\n\r\n  addDayGroup() {\r\n    return this.formBuilder.group({\r\n      day: ['', Validators.required],\r\n      startTime: ['', Validators.required],\r\n      endTime: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  addDay() { this.daysArray.push(this.addDayGroup()); }\r\n\r\n  removeDay(index: number) {\r\n    this.daysArray.removeAt(index);\r\n  }\r\n\r\n  removeRepeatingDays() {\r\n    for (let i = 0; i < this.daysArray.length; i++) {\r\n      this.daysArray.removeAt(i);\r\n    }\r\n  }\r\n\r\n  get daysArray() { return this.repeatingDaysForm.get('days') as FormArray; }\r\n\r\n  saveEvent(): void {\r\n    if (!this.event.location) {\r\n      this.formErrorMessage = 'Please enter a valid address or establishment name.';\r\n    } else if (this.repeatingDaysForm.invalid && this.event.isRepeating) {\r\n      this.formErrorMessage = 'Please enter the day and time for the event or remove that day.';\r\n    } else if (this.event.startsTime > this.event.endsTime) {\r\n      this.formErrorMessage = 'Event\\'s end time needs to be a time after the event\\'s start time.';\r\n    } else { this.formErrorMessage = ''; }\r\n\r\n\r\n    if (this.formErrorMessage === '' && this.startsDate.valid) {\r\n      this.event.creatorEmail = this.user.email;\r\n      this.event.startsDate = this.startsDate.value;\r\n      this.event.repeatingDaysTimes = this.daysArray.value;\r\n      // this.eventService.put(this.event).subscribe(\r\n      //   result => {\r\n      //     this.indexedDBService.addEvent(result, eventCreated);\r\n      //     this.gotoDashBoard();\r\n      //   },\r\n      //   error => {\r\n      //     console.error(error);\r\n      //   });\r\n    }\r\n  }\r\n\r\n  deleteEvent(id): void {\r\n    this.eventService.remove(id).subscribe(\r\n      result => {\r\n        this.gotoDashBoard();\r\n      },\r\n      error => console.error(error)\r\n    );\r\n  }\r\n\r\n  gotoDashBoard(): void {\r\n    this.router.navigate(['/dashboard']);\r\n  }\r\n\r\n}\r\n","<mat-card>\r\n  <form #editEventForm=\"ngForm\" name=\"editEventForm\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <h2>{{event.id ? 'Edit' : 'Add'}} event</h2>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-form-field>\r\n      <input matInput placeholder=\"Name\" [(ngModel)]=\"event.name\" name=\"name\" required>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input type=\"number\" matInput placeholder=\"Spots Available\" [(ngModel)]=\"event.spotsAvailable\"\r\n        name=\"spotsAvailable\" required>\r\n    </mat-form-field>\r\n\r\n    <mat-checkbox (change)=\"removeRepeatingDays()\" [(ngModel)]=\"event.isRepeating\" name=\"isRepeating\">Event\r\n      Repeats</mat-checkbox>\r\n\r\n    <mat-form-field>\r\n      <textarea matInput placeholder=\"Description\" [(ngModel)]=\"event.description\" name=\"description\"\r\n        required></textarea>\r\n    </mat-form-field>\r\n\r\n    <GU-google-place (setAddress)=\"getAddress($event)\" required>\r\n    </GU-google-place>\r\n\r\n    <mat-form-field>\r\n      <input matInput type=\"date\" placeholder=\"Choose the event starts date\" [formControl]=\"startsDate\" required>\r\n      <mat-error>Please enter date on or after today's date</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input matInput type=\"time\" placeholder=\"Choose the event starts time\" [(ngModel)]=\"event.startsTime\"\r\n        name=\"startsTime\" required>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <input matInput type=\"time\" placeholder=\"Choose the event ends time\" [(ngModel)]=\"event.endsTime\" name=\"endsTime\"\r\n        required>\r\n    </mat-form-field>\r\n\r\n    <form [formGroup]=\"repeatingDaysForm\" *ngIf=\"event.isRepeating\">\r\n      <div formArrayName=\"days\">\r\n        <div *ngFor=\"let group of daysArray.controls; let i = index;\" [formGroupName]=\"i\">\r\n          <mat-form-field>\r\n            <select matNativeControl placeholder=\"Day of the Week\" formControlName=\"day\">\r\n              <option value=\"Monday\">Mondays</option>\r\n              <option value=\"Tuesday\">Tuesdays</option>\r\n              <option value=\"Wednesday\">Wednesdays</option>\r\n              <option value=\"Thursday\">Thursdays</option>\r\n              <option value=\"Friday\">Fridays</option>\r\n              <option value=\"Saturday\">Saturdays</option>\r\n              <option value=\"Sunday\">Sundays</option>\r\n            </select>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field>\r\n            <input matInput type=\"time\" placeholder=\"Choose the event starts time\" formControlName=\"startsTime\" required>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field>\r\n            <input matInput type=\"time\" placeholder=\"Choose the event ends time\" formControlName=\"endsTime\" required>\r\n            <mat-error>Event's end time needs to be a time after the event's start time.</mat-error>\r\n          </mat-form-field>\r\n\r\n          <button mat-raised-button color=\"secondary\" (click)=\"removeDay(i)\">Remove</button>\r\n        </div>\r\n      </div>\r\n\r\n      <button mat-raised-button color=\"secondary\" (click)=\"addDay()\">Add another day</button>\r\n    </form>\r\n\r\n\r\n    <br /> <br />\r\n    <mat-error>{{formErrorMessage}}</mat-error>\r\n    <br />\r\n\r\n    <mat-card-actions>\r\n      <button mat-raised-button color=\"primary\" [disabled]=\"editEventForm.invalid\" (click)=\"saveEvent()\">Save\r\n      </button>\r\n      <button mat-raised-button color=\"secondary\" (click)=\"deleteEvent(event.id)\" *ngIf=\"event.id\" type=\"button\">Delete\r\n      </button>\r\n      <a mat-button (click)=\"location.back()\">Cancel</a>\r\n    </mat-card-actions>\r\n    <mat-card-footer>\r\n\r\n    </mat-card-footer>\r\n  </form>\r\n</mat-card>","import { Component } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\n\r\nexport class AppComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver) { }\r\n\r\n}\r\n","<GU-menu-nav>\r\n  <router-outlet></router-outlet>\r\n</GU-menu-nav>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\n\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  displayedColumns: string[] = ['name', 'numParticipants', 'startDate', 'startTime'];\r\n  user: any;\r\n  dataSource: any;\r\n  dataSource2: any;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource = new MatTableDataSource<Events>(this.user.eventsCreated);\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource2 = new MatTableDataSource<Events>(this.user.eventsParticipating);\r\n    this.dataSource2.paginator = this.paginator;\r\n  }\r\n\r\n\r\n  selectEvent(event: any) {\r\n    this.router.navigate(['/event-edit']);\r\n  }\r\n\r\n}\r\n\r\nexport interface Events {\r\n  name: string;\r\n  numParticipants: number;\r\n  startDate: Date;\r\n  startTime: string;\r\n}\r\n","<div class=\"dashboard-container\">\r\n  <h3>\r\n    Hi {{user.firstName}} {{user.lastName}}, welcome to your dashboard!\r\n  </h3>\r\n\r\n  <h3>\r\n    email: {{user.email}}\r\n\r\n\r\n    <!-- <a mat-list-item [routerLink]=\"[changePasswordPageUrl]\" routerLinkActive=\"active\">Change Password</a> -->\r\n  </h3>\r\n\r\n  <div class=\"main-events-container\">\r\n    <div class=\"events-container\">\r\n\r\n      <h5>Events Created</h5>\r\n\r\n      <table mat-table [dataSource]=\"dataSource\">\r\n\r\n        <!-- Position Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef> Name </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.name}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"numParticipants\">\r\n          <th mat-header-cell *matHeaderCellDef> Number Of Participants </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.numParticipants}}/{{event.spotsAvailable}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Weight Column -->\r\n        <ng-container matColumnDef=\"startDate\">\r\n          <th mat-header-cell *matHeaderCellDef> Start Date </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.startDate}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Symbol Column -->\r\n        <ng-container matColumnDef=\"startTime\">\r\n          <th mat-header-cell *matHeaderCellDef> Start Time </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.startTime}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selectEvent(row)\"></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n    </div>\r\n\r\n    <div class=\"events-container\">\r\n\r\n\r\n      <h5>Events Attending</h5>\r\n\r\n      <table mat-table [dataSource]=\"dataSource2\">\r\n\r\n        <!-- Position Column -->\r\n        <ng-container matColumnDef=\"name\">\r\n          <th mat-header-cell *matHeaderCellDef> Name </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.name}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Name Column -->\r\n        <ng-container matColumnDef=\"numParticipants\">\r\n          <th mat-header-cell *matHeaderCellDef> Number Of Participants </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.numParticipants}}/{{event.spotsAvailable}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Weight Column -->\r\n        <ng-container matColumnDef=\"startDate\">\r\n          <th mat-header-cell *matHeaderCellDef> Start Date </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.startDate}} </td>\r\n        </ng-container>\r\n\r\n        <!-- Symbol Column -->\r\n        <ng-container matColumnDef=\"startTime\">\r\n          <th mat-header-cell *matHeaderCellDef> Start Time </th>\r\n          <td mat-cell *matCellDef=\"let event\"> {{event.startTime}} </td>\r\n        </ng-container>\r\n\r\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"selectEvent(row)\"></tr>\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n</div>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { AgmCoreModule } from '@agm/core';\r\n\r\n// pages\r\nimport { EventListComponent } from './pages/event-list/event-list.component';\r\nimport { EventEditComponent } from './pages/event-edit/event-edit.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { RegisterComponent } from './pages/register/register.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\r\n\r\n// services\r\nimport { AuthGuard } from './shared/guard/auth.guard';\r\nimport {\r\n  AccountService,\r\n  EventService,\r\n  IndexedDBService\r\n} from './shared/services';\r\nimport MenuNavComponent from './menu-nav/menu-nav.component';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { GooglePlacesComponent } from './google-places.component';\r\nimport { EventDetailsComponent } from './pages/event-details/event-details.component';\r\nimport { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';\r\nimport { ChangePasswordComponent } from './pages/change-password/change-password.component';\r\nimport { MaterialModule } from './modules/material.module';\r\nimport { TextErrorsComponent } from './errors/text-errors/text-errors.component';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { ErrorInterceptor } from './interceptors/error.interceptor';\r\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\r\nimport { JwtInterceptor } from './interceptors/jwt.interceptor';\r\nimport { TextInputComponent } from './forms/text-input/text-input.component';\r\nimport { DateInputComponent } from './forms/date-input/date-input.component';\r\nimport { MemberEditComponent } from './members/member-edit/member-edit.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    EventListComponent,\r\n    EventEditComponent,\r\n    HomeComponent,\r\n    RegisterComponent,\r\n    LoginComponent,\r\n    DashboardComponent,\r\n    MenuNavComponent,\r\n    GooglePlacesComponent,\r\n    EventDetailsComponent,\r\n    ForgotPasswordComponent,\r\n    ChangePasswordComponent,\r\n    TextErrorsComponent,\r\n    NotFoundComponent,\r\n    TextInputComponent,\r\n    DateInputComponent,\r\n    MemberEditComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    LayoutModule,\r\n    MaterialModule,\r\n    AgmCoreModule.forRoot({\r\n      apiKey: 'AIzaSyCTAv20qgxgOCCMNMsMfWZaDmXDTJT2vfw'\r\n    }), ToastrModule.forRoot({\r\n      timeOut: 10000,\r\n      positionClass: 'toast-top-right'\r\n    })\r\n  ],\r\n  providers: [EventService, AccountService, AuthGuard, IndexedDBService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: JwtInterceptor,\r\n      multi: true\r\n    },\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: ErrorInterceptor,\r\n      multi: true\r\n    }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export * from './event.service';\r\nexport * from './account.service';\r\nexport * from './indexedDb.service';\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { EventService, IndexedDBService } from 'src/app/shared/services';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-event-details',\r\n  templateUrl: './event-details.component.html',\r\n  styleUrls: ['./event-details.component.scss']\r\n})\r\nexport class EventDetailsComponent implements OnInit, OnDestroy {\r\n\r\n  user: any;\r\n  event: any;\r\n  isParticipating: boolean;\r\n  mapType = 'roadmap';\r\n  startDate: any;\r\n\r\n  constructor(private router: Router,\r\n    private eventService: EventService,\r\n    private indexedDBService: IndexedDBService,\r\n    private route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.loadEvent();\r\n    // this.dataService.selectedEvent$.subscribe(response => {\r\n    //   if (!response) {\r\n    //     this.router.navigate([eventListPageUrl]);\r\n    //   }\r\n    //   this.event = response;\r\n    //   const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n    //   const date = new Date(this.event.startDate);\r\n    //   this.startDate = date.toLocaleDateString('en-US', options);\r\n    // });\r\n    this.isParticipating = this.checkEventIfParticipating();\r\n  }\r\n\r\n  loadEvent() {\r\n    this.eventService.getEvent(this.route.snapshot.paramMap.get('id')).subscribe(\r\n      event => { this.event = event; }\r\n    )\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // this.dataService.setSelectedEvent(null);\r\n  }\r\n\r\n  addEvent() {\r\n    // const data = { userId: this.user.id, eventId: this.event.id };\r\n    // this.eventService.addParticipant(data).subscribe(\r\n    //   response => {\r\n    //     this.indexedDBService.addEvent(response, eventParticipating);\r\n    //     // this.dataService.setUser();\r\n    //     this.router.navigate([dashboardPageUrl]);\r\n    //   },\r\n    //   err => console.log(err)\r\n    // );\r\n  }\r\n\r\n  checkEventIfParticipating(): boolean {\r\n    this.user.eventsParticipating.forEach((event: { id: any; }) => {\r\n      if (event.id === this.event.id) { return true; }\r\n    });\r\n\r\n    this.user.eventsCreated.forEach((event: { id: any; }) => {\r\n      if (event.id === this.event.id) {\r\n        return true;\r\n      }\r\n    });\r\n    return false;\r\n  }\r\n}\r\n\r\n","<div *ngIf=\"event\" class=\"event-details-container\">\r\n  <h3>{{event.name}}</h3>\r\n  <h3>{{event.description}}</h3>\r\n  <h3><strong>{{event.location.name}}</strong>\r\n    {{event.location.street}} {{event.location.city}} {{event.location.state}} {{event.location.country}}\r\n    {{event.location.zipCode}} </h3>\r\n  <h3>{{event.numParticipants}}/{{event.spotsAvailable}}</h3>\r\n  <h3>{{startDate}}</h3>\r\n  <h3>{{event.startTime}}</h3>\r\n  <h3>{{event.endTime}}</h3>\r\n\r\n  <button (click)=\"addEvent()\" *ngIf=\"isParticipating && event.numParticipants < event.spotsAvailable\">add</button>\r\n\r\n  <agm-map [latitude]=\"event.location.latitude\" [longitude]=\"event.location.longitude\" [mapTypeId]=\"mapType\"\r\n    [zoom]=\"15\">\r\n    <agm-marker [latitude]=\"event.location.latitude\" [longitude]=\"event.location.longitude\" [label]=\"event.name\">\r\n    </agm-marker>\r\n  </agm-map>\r\n\r\n  <p *ngIf=\"event.numParticipants >= event.spotsAvailable\">Full</p>\r\n  <p *ngIf=\"!isParticipating\">Already Participating</p>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { AccountService, IndexedDBService } from '../services';\r\n\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private accountService: AccountService,\r\n    private router: Router) { }\r\n\r\n  /**\r\n   * Check if user's token is valid\r\n   * @returns boolean\r\n   */\r\n  canActivate(): Observable<boolean> {\r\n    return this.accountService.currentUser$.pipe(\r\n      map(user => {\r\n        if (user) return true;\r\n        this.router.navigate(['/login']);\r\n      })\r\n    )\r\n  }\r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AbstractControl, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\n\r\nimport { AccountService } from 'src/app/shared/services';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'GU-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  hidePassword = true;\r\n  hideConfirmPassword = true;\r\n  isLoading = false;\r\n  registerForm: FormGroup;\r\n  passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private router: Router,\r\n    private accountService: AccountService,\r\n    private fb: FormBuilder,\r\n    private toastr: ToastrService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n  }\r\n\r\n  initializeForm() {\r\n    this.registerForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      confirmEmail: ['', [Validators.required, this.matchValues('email')]],\r\n      password: ['', [Validators.required, Validators.pattern(this.passwordPattern)]],\r\n      confirmPassword: ['', [Validators.required, this.matchValues('password')]],\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      gender: ['', Validators.required],\r\n      DOB: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  matchValues(matchTo: string): ValidatorFn {\r\n    return (control: AbstractControl) => {\r\n      return control?.value === control?.parent?.controls[matchTo].value\r\n        ? null : { isMatching: true }\r\n    }\r\n  }\r\n\r\n  register(): void {\r\n\r\n    this.isLoading = true;\r\n\r\n    this.registerForm.controls['DOB'].setValue(JSON.stringify(this.registerForm.controls['DOB'].value).replace(/\"/g, \"\"));\r\n\r\n    this.accountService.register(this.registerForm.value).subscribe(response => {\r\n      console.log(response);\r\n      // this.toastr.success(response.);\r\n      this.router.navigateByUrl('login');\r\n      this.isLoading = false;\r\n    }, error => {\r\n      console.log(error.error);\r\n      this.isLoading = false;\r\n    })\r\n    this.isLoading = false;\r\n  }\r\n}\r\n","<mat-card>\r\n  <form [formGroup]='registerForm' (ngSubmit)=\"registerForm.valid && register()\">\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <h2>Register Form</h2>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <GU-text-input [formControl]=\"registerForm.controls['email']\" [label]=\"'email'\" [type]=\"'email'\"></GU-text-input>\r\n\r\n      <GU-text-input [formControl]=\"registerForm.controls['confirmEmail']\" [label]=\"'Confirm email'\" [type]=\"'email'\">\r\n      </GU-text-input>\r\n\r\n      <GU-text-input [formControl]=\"registerForm.controls['password']\" [label]=\"'password'\" [type]=\"'password'\">\r\n        <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{hidePassword ? 'visibility_off' : 'visibility'}}\r\n        </mat-icon>\r\n      </GU-text-input>\r\n\r\n      <GU-text-input [formControl]=\"registerForm.controls['confirmPassword']\" [label]=\"'Confirm password'\"\r\n        [type]=\"'password'\">\r\n        <mat-icon matSuffix (click)=\"hideConfirmPassword = !hideConfirmPassword\">\r\n          {{hideConfirmPassword ? 'visibility_off' : 'visibility'}}\r\n        </mat-icon>\r\n      </GU-text-input>\r\n\r\n      <GU-text-input [formControl]=\"registerForm.controls['firstName']\" [label]=\"'First name'\" [type]=\"'text'\">\r\n      </GU-text-input>\r\n\r\n      <GU-text-input [formControl]=\"registerForm.controls['lastName']\" [label]=\"'Last name'\" [type]=\"'text'\">\r\n      </GU-text-input>\r\n\r\n      <mat-form-field>\r\n        <select matNativeControl placeholder=\"Gender\" [formControl]=\"registerForm.controls['gender']\">\r\n          <option value=\"Male\">Male</option>\r\n          <option value=\"Female\">Female</option>\r\n          <option value=\"Other\">Other</option>\r\n        </select>\r\n        <mat-error>\r\n          Required\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field appearance=\"fill\">\r\n        <mat-label>Date of birth</mat-label>\r\n        <input matInput [matDatepicker]=\"picker\" [formControl]=\"registerForm.controls['DOB']\">\r\n        <mat-datepicker-toggle matSuffix [for]=\"picker\" format=\"DD/MM/YYYY\"></mat-datepicker-toggle>\r\n        <mat-datepicker #picker></mat-datepicker>\r\n      </mat-form-field>\r\n\r\n      <mat-card-actions>\r\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!registerForm.valid\">\r\n          Register\r\n        </button>\r\n        <a mat-button routerLink=\"/\">Cancel</a>\r\n      </mat-card-actions>\r\n      <mat-card-footer>\r\n\r\n      </mat-card-footer>\r\n    </mat-card-content>\r\n  </form>\r\n</mat-card>\r\n\r\n<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AccountService } from '../shared/services';\nimport { UserModel } from '../shared/models';\nimport { take } from 'rxjs/operators';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n\n  constructor(private accountService: AccountService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    let currentUser: UserModel;\n\n    this.accountService.currentUser$.pipe(take(1)).subscribe(\n      user => currentUser = user\n    );\n    if (currentUser) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      })\n    }\n    return next.handle(request);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\n\r\nimport { RegisterModel, UserModel } from '../models';\r\n\r\nimport {\r\n    environment\r\n} from '../../../environments/environment';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n\r\n    private currentUserSubject = new ReplaySubject<UserModel>(1);\r\n    currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n    ) { }\r\n\r\n    getAll = (): Observable<Array<RegisterModel>> => this.http.get<Array<RegisterModel>>(environment.baseUrl);\r\n\r\n    register(model: any) {\r\n        return this.http.post(environment.baseUrl + 'account/register', model);\r\n    }\r\n\r\n    login = (email: String, password: String, rememberMe: Boolean) => {\r\n        let user = {\r\n            email: email,\r\n            password: password,\r\n            rememberMe: rememberMe\r\n        }\r\n        return this.http.post(environment.baseUrl + 'account/login', user)\r\n            .pipe(\r\n                shareReplay(),\r\n                map((user: UserModel) => {\r\n                    console.log(user);\r\n                    this.currentUserSubject.next(user);\r\n                    //TODO: use local storage for now, move to IndexedDB later\r\n                    localStorage.setItem('user', JSON.stringify(user));\r\n                })\r\n            );\r\n\r\n    }\r\n\r\n    setCurrentUser(user: UserModel) {\r\n        this.currentUserSubject.next(user);\r\n    }\r\n\r\n\r\n    logout() {\r\n        return this.http.get<any>(environment.baseUrl + 'account/logout');\r\n    }\r\n\r\n}\r\n\r\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'GU-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotPasswordApiUrl = '/api/v1/account/forgotPassword';\n  forgotPasswordForm: FormGroup;\n  Email: FormControl;\n\n  constructor(\n    private fb: FormBuilder,\n    private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.Email = new FormControl('', [Validators.required, Validators.email]);\n\n    this.forgotPasswordForm = this.fb.group({\n      Email: this.Email\n    });\n  }\n\n  onSubmit() {\n    let userInfo = this.forgotPasswordForm.value;\n    this.http.post<any>(environment.baseUrl + this.forgotPasswordApiUrl + '/' + this.Email, {}).subscribe(\n      (result) => {\n        if (result && result.message == 'Success') {\n\n        }\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n\n","<div class=\"container\">\n  <div class=\"d-flex justify-content-center h-100\">\n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h3>Password Recovery</h3>\n      </div>\n      <div class=\"card-body\" id=\"forgotPassCard\">\n        <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"onSubmit()\">\n          <div class=\"input-group form-group\">\n            <div class=\"input-group-prepend\">\n              <span class=\"input-group-text\"><i class=\"fas fa-envelope\"></i></span>\n            </div>\n            <input formControlName=\"Email\" type=\"email\" class=\"form-control\" placeholder=\"john@GroupUp.com\" />\n          </div>\n          <div class=\"form-group\">\n            <input type=\"submit\" value=\"Submit\" [disabled]=\"forgotPasswordForm.invalid\"\n              class=\"btn float-right forgot_btn\" />\n          </div>\n          <div id=\"errors\">\n            <div *ngIf=\"Email.touched && Email.errors\" class=\"errorMessage\">\n              <span *ngIf=\"Email.hasError('required')\">Email is required.</span>\n            </div>\n          </div>\n        </form>\n      </div>\n      <div class=\"card-footer\">\n        <div class=\"d-flex justify-content-center links\">Don't have an account?<a routerLink=\"/register\">Sign\n            Up</a></div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { EventService } from '../../shared/services';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'GU-event-list',\r\n  templateUrl: './event-list.component.html',\r\n  styleUrls: ['./event-list.component.scss']\r\n})\r\n\r\nexport class EventListComponent implements OnInit {\r\n\r\n  events: any;\r\n  userLocation: string;\r\n\r\n  errorMessage = '';\r\n  distanceError: string;\r\n  cityError: string;\r\n\r\n  distance: number;\r\n  states: any;\r\n  state: string;\r\n  cities: any;\r\n  city: string;\r\n\r\n  latitude: number;\r\n  longitude: number;\r\n  mapType = 'roadmap';\r\n\r\n  markers = [];\r\n\r\n  constructor(\r\n    private eventService: EventService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.eventService.getStates().subscribe(\r\n      (result: any) => this.states = result,\r\n      (error: string) => this.errorMessage = error\r\n    );\r\n  }\r\n\r\n  getEventsByLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        if (this.distance) {\r\n          this.latitude = position.coords.latitude;\r\n          this.longitude = position.coords.longitude;\r\n\r\n          this.eventService.getByDistance(position.coords.latitude, position.coords.longitude, this.distance).subscribe(\r\n            (result: { startDate: any; }[]) => {\r\n              console.log(typeof result[0].startDate);\r\n              this.events = result;\r\n              this.events.length === 0 ?\r\n                this.errorMessage = 'Can\\'t find any event.' :\r\n                this.errorMessage = '';\r\n              this.addMarkers();\r\n            },\r\n            (error: string) => this.errorMessage = error\r\n          );\r\n        }\r\n      });\r\n    } else {\r\n      this.userLocation = 'Geolocation is not supported by this browser';\r\n    }\r\n  }\r\n\r\n  getEventsByCity() {\r\n    if (!this.state) {\r\n      this.cityError = 'Please select a state.';\r\n    } else if (!this.city) {\r\n      this.cityError = 'Please select a city.';\r\n    } else {\r\n      this.eventService.getByCity(this.city, this.state).subscribe(\r\n        (result: any) => {\r\n          this.events = result;\r\n          this.events.length === 0 ?\r\n            this.errorMessage = 'Can\\'t find any event.' :\r\n            this.errorMessage = '';\r\n          this.addMarkers();\r\n        },\r\n        (error: string) => this.errorMessage = error\r\n      );\r\n    }\r\n  }\r\n\r\n  addMarkers() {\r\n    this.markers = [];\r\n    this.events.forEach((event: { location: { latitude: any; longitude: any; }; name: any; }) => {\r\n      this.markers.push({\r\n        lat: event.location.latitude,\r\n        lng: event.location.longitude,\r\n        label: event.name\r\n      });\r\n    });\r\n  }\r\n\r\n  // Get all the cities that have events\r\n  getEventsCities() {\r\n    this.eventService.getCities(this.state).subscribe(\r\n      (result: any) => this.cities = result,\r\n      (error: string) => this.errorMessage = error\r\n    );\r\n  }\r\n\r\n  sortByDate() {\r\n    console.log(this.events);\r\n    this.events.forEach(() => {\r\n\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"event-list-container\">\r\n  <h3>Search events by: </h3>\r\n\r\n  <div class=\"search-container\">\r\n    <div>\r\n      <mat-form-field>\r\n        <select matNativeControl placeholder=\"Within\" name=\"distance\" [(ngModel)]=\"distance\">\r\n          <option value=10>10 miles</option>\r\n          <option value=25>25 miles</option>\r\n          <option value=50>50 miles</option>\r\n        </select>\r\n        <mat-error>\r\n          Required\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <button (click)=\"getEventsByLocation()\">search by location</button>\r\n    </div>\r\n\r\n    <div>\r\n      <mat-form-field>\r\n        <select matNativeControl placeholder=\"State\" name=\"state\" [(ngModel)]=\"state\" (change)=\"getEventsCities()\">\r\n          <option *ngFor=\"let state of states\" value=\"{{state}}\">{{state}}</option>\r\n        </select>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <select matNativeControl placeholder=\"City\" name=\"city\" [(ngModel)]=\"city\">\r\n          <option *ngFor=\"let city of cities\" value=\"{{city}}\">{{city}}</option>\r\n        </select>\r\n      </mat-form-field>\r\n      <button (click)=\"getEventsByCity()\">search by city</button>\r\n    </div>\r\n  </div>\r\n\r\n  <agm-map [latitude]=\"latitude\" [longitude]=\"longitude\" [mapTypeId]=\"mapType\" [fitBounds]=\"true\">\r\n    <agm-marker *ngFor=\"let marker of markers\" [latitude]=\"marker.lat\" [longitude]=\"marker.lng\" [agmFitBounds]=\"true\">\r\n    </agm-marker>\r\n  </agm-map>\r\n\r\n  <div class=\"sort-selection-container\">\r\n    <h4>Sort Events by: </h4>\r\n    <button>distance</button>\r\n    <button (click)=\"sortByDate()\">date</button>\r\n  </div>\r\n\r\n  <h3>{{errorMessage}}</h3>\r\n\r\n  <div class=\"events-container\">\r\n    <mat-card *ngFor=\"let event of events\" routerLink='event/{{event.id}}'>\r\n      <mat-card-header>\r\n        <mat-card-title>{{event.name}}</mat-card-title>\r\n        <mat-card-subtitle>{{event.description}}</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <h5><strong>{{event.location.name}}</strong>\r\n          {{event.location.street}} {{event.location.city}} {{event.location.state}} {{event.location.country}}\r\n          {{event.location.zipCode}} </h5>\r\n        <h5>{{event.startDate}}</h5>\r\n        <h5>{{event.startTime}}</h5>\r\n      </mat-card-content>\r\n      <mat-card-actions>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n\r\n\r\n\r\n</div>\r\n","import { Component } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'GU-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.scss']\n})\nexport class ChangePasswordComponent {\n\n  hidePassword = false;\n  errorMessage = '';\n  isLoading = false;\n  changePasswordUrl = '/api/v1/profile/changePassword';\n\n\n  constructor(private http: HttpClient) { }\n\n  onSubmit(form: any): void {\n    this.isLoading = true;\n    let changePasswordModel = {\n      oldPassword: form.oldPassword,\n      newPassword: form.newPassword\n    }\n\n    this.http.post<any>(environment.baseUrl + this.changePasswordUrl, changePasswordModel)\n      .subscribe(result => {\n        this.isLoading = false;\n        console.log(result);\n      }, error => {\n        this.errorMessage = error;\n      });\n\n\n  }\n\n}\n","<mat-card>\n  <form #changeForm=\"ngForm\" (ngSubmit)=\"onSubmit(changeForm.value)\">\n    <mat-card-header>\n      <mat-card-title>\n        <h2>Change Password Form</h2>\n      </mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content>\n      <mat-form-field>\n        <input matInput placeholder=\"Old Password\" [type]=\"hidePassword ? 'password' : 'text'\" name=\"oldPassword\"\n          ngModel required />\n        <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{hidePassword ? 'visibility_off' : 'visibility'}}\n        </mat-icon>\n      </mat-form-field>\n\n      <mat-form-field>\n        <input matInput placeholder=\"New Password\" [type]=\"hidePassword ? 'password' : 'text'\" name=\"newPassword\"\n          ngModel required />\n        <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{hidePassword ? 'visibility_off' : 'visibility'}}\n        </mat-icon>\n      </mat-form-field>\n\n      <mat-form-field>\n        <input matInput placeholder=\"Confirm New Password\" [type]=\"hidePassword ? 'password' : 'text'\"\n          name=\"confirmPassword\" ngModel required />\n        <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{hidePassword ? 'visibility_off' : 'visibility'}}\n        </mat-icon>\n      </mat-form-field>\n    </mat-card-content>\n\n    <mat-error *ngIf=\"errorMessage\">\n      {{errorMessage}}\n    </mat-error>\n\n    <mat-card-actions>\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!changeForm.form.valid\">Submit\n      </button>\n    </mat-card-actions>\n\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n\n    <mat-card-footer></mat-card-footer>\n\n  </form>\n</mat-card>\n","import Dexie from 'dexie';\r\n\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class IndexedDBService extends Dexie {\r\n\r\n    private db: any;\r\n\r\n    constructor() {\r\n        super('IndexedDBService');\r\n        this.openDB();\r\n    }\r\n\r\n    openDB(): void {\r\n        this.db = new Dexie('GroupUpDB');\r\n        this.db.version(1).stores({\r\n            user: 'id, email, firstName, lastName, gender, DOB',\r\n            eventsCreated: 'id , name, numParticipants, spotsAvailable, isRepeating, description, location, startDate, startTime, endTime',\r\n            // tslint:disable-next-line:max-line-length\r\n            eventsParticipating: 'id , name, numParticipants, spotsAvailable, isRepeating, description, location, startDate, startTime, endTime',\r\n            repeatingDaysTimes: 'id, day, startTime, endTime, eventCreatedId, eventParticipatingId'\r\n        });\r\n    }\r\n\r\n    addUser(user: any): void {\r\n        this.openDB();\r\n        this.db.user.put({\r\n            token: user.token,\r\n            id: user.id,\r\n            email: user.email,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            gender: user.gender,\r\n            DOB: user.DOB\r\n        }).then(userId => {\r\n            // user.eventsCreated.forEach(event => this.addEvent(event, eventCreated));\r\n            // user.eventsParticipating.forEach(event => this.addEvent(event, eventParticipating));\r\n        }).catch(e => console.log('Error: ' + (e.stack || e)));\r\n    }\r\n\r\n    addEvent(event: any, kindOfEvent: string) {\r\n        console.log(\"fads\");\r\n\r\n        this.db[kindOfEvent === 'eventCreated' ? 'eventsCreated' : 'eventsParticipating'].put({\r\n            id: event.id,\r\n            name: event.name,\r\n            numParticipants: event.numParticipants,\r\n            spotsAvailable: event.spotsAvailable,\r\n            isRepeating: event.isRepeating,\r\n            description: event.description,\r\n            location: event.location,\r\n            startDate: event.startDate,\r\n            startTime: event.startTime,\r\n            endTime: event.endTime\r\n        }).then(eventId => {\r\n            event.repeatingDaysTimes.forEach(r => {\r\n                this.db.repeatingDaysTimes.add({\r\n                    id: r.id,\r\n                    day: r.day,\r\n                    startTime: r.startTime,\r\n                    endTime: r.endTime,\r\n                    [kindOfEvent + 'Id']: eventId\r\n                }).catch(e => console.log('Error: ' + (e.stack || e)));\r\n            });\r\n        }).catch(e => console.log('Error: ' + (e.stack || e)));\r\n\r\n    }\r\n\r\n    async getUserDataAsync() {\r\n        const user = await this.db.user.toArray();\r\n        if (user[0]) {\r\n            user[0].eventsCreated = await this.db.eventsCreated.toArray();\r\n            user[0].eventsCreated.forEach(event => {\r\n                event.repeatingDaysTimes = this.db.repeatingDaysTimes.where({ eventCreatedId: event.id });\r\n            });\r\n            user[0].eventsParticipating = await this.db.eventsParticipating.toArray();\r\n            user[0].eventsParticipating.forEach(event => {\r\n                event.repeatingDaysTimes = this.db.repeatingDaysTimes.where({ eventParticipatingId: event.id });\r\n            });\r\n            return user[0];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async deleteDBAsync() {\r\n        this.db.delete().then(() => this.db.open());\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Router, NavigationExtras } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router, private toastr: ToastrService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError(error => {\n        if (error) {\n          switch (error.status) {\n            case 400:\n              if (error.error.errors) {\n                const modalStateErrors = [];\n                for (const key in error.error.errors) {\n                  if (error.error.errors[key]) {\n                    modalStateErrors.push(error.error.errors[key])\n                  }\n                }\n                throw modalStateErrors.flat();\n              } else if (typeof (error.error) === 'object') {\n                this.toastr.error(error.statusText, error.status);\n              } else {\n                this.toastr.error(error.error, error.status);\n              }\n              break;\n            case 401:\n              this.toastr.error(error.statusText, error.status);\n              break;\n            case 404:\n              this.router.navigateByUrl('/not-found');\n              break;\n            case 500:\n              const navigationExtras: NavigationExtras = { state: { error: error.error } }\n              this.router.navigateByUrl('/server-error', navigationExtras);\n              break;\n            default:\n              this.toastr.error('Something unexpected went wrong');\n              console.log(error);\n              break;\n          }\n        }\n        return throwError(error);\n      })\n    )\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'GU-member-edit',\n  templateUrl: './member-edit.component.html',\n  styleUrls: ['./member-edit.component.scss']\n})\nexport class MemberEditComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>member-edit works!</p>\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EventListComponent } from './pages/event-list/event-list.component';\r\nimport { EventEditComponent } from './pages/event-edit/event-edit.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { RegisterComponent } from './pages/register/register.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { DashboardComponent } from './pages/dashboard/dashboard.component';\r\nimport { EventDetailsComponent } from './pages/event-details/event-details.component';\r\nimport { ChangePasswordComponent } from './pages/change-password/change-password.component';\r\nimport { MemberEditComponent } from '../app/members/member-edit/member-edit.component';\r\nimport { AuthGuard } from './shared/guard/auth.guard';\r\nimport { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';\r\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  {\r\n    path: '',\r\n    runGuardsAndResolvers: 'always',\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      { path: 'dashboard', component: DashboardComponent },\r\n      { path: 'member/edit', component: MemberEditComponent },\r\n      { path: 'event-list', component: EventListComponent },\r\n      { path: 'event-edit', component: EventEditComponent },\r\n      { path: 'event-details', component: EventDetailsComponent },\r\n      { path: 'change-password', component: ChangePasswordComponent },\r\n    ]\r\n  },\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent },\r\n  { path: 'forgot-password', component: ForgotPasswordComponent },\r\n  { path: 'not-found', component: NotFoundComponent },\r\n  { path: '**', component: HomeComponent, pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}